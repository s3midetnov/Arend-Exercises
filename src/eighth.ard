\import first
\import fourth
\import second (T)
\func tt : \Type2 => \Type0 -> \Type1
{-Exercise 1: Calculate levels in each of the the invocations of id’’ below.
Specify explicitly result types for all idTest*.-}
\func id (A : \Type \lp) (a : A) => a

\class Functor (F : \Set -> \Set) -- \Set is almost the same as \Type, we will discuss the difference later
  | fmap {A B : \Set} : (A -> B) -> F A -> F B


\func id'' {A : \Type \lp} (a : A) => a

\func idTest1 :  \Pi (A : \Type \lp) -> A -> A => id'' (id'' id)
\func idTest2 : \Type \lp -> \Type \lp => id'' Maybe
\func idTest3 : \Type (\suc \lp) => id'' Functor
\func idTest4 : \Type (\suc \lp) => id'' (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Set} -> (A -> B) -> Maybe A -> Maybe B) : \Type\lp => id'' (Functor Maybe f)



{-Exercise 2: Define div via Nat-ind.-}

\func Nat-ind (E : Nat -> \Type)
              (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> T (k < n) -> E k) -> E n)
              (n : Nat) : E n => {?}



{-Exercise 3: Prove the following induction principle for lists:-}
\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> T (length ys < length xs) -> E ys) -> E xs)
  (xs : List A) : E xs => \case (length xs) \as n \with {
  | 0 => {?}
  | suc n => {?}
}