\import fourth (step-of-ind)
\import second
\import third

{-Exercise 1: Define priorities of the functions
 f1, f2, f3, f4, f5 and f6 so that the function ‘test’ typechecks. -}

\data Maybe (A : \Type) | just A | nothing


\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 8 f5 => f1
\func f6 => f4
\func test => f1 f2 f3 f4 f5 f6

{-Exercise 2: Define the function ‘if’,
which takes a boolean value b and two elements of an arbitrary type A
and return the first element when b equals to true and the second one otherwise.-}

\data Bool | false | true

\data Unit | unit

\func not (_ : Bool) : Bool
  | true => false
  | false => true

\func if {A : \Type} (b : Boaol) (x y : A) : A \elim b
  | true => x
  | false => y

\func \infix 9 and (x y : Bool) : Bool => if x y x

\func \infix 9 or (x y : Bool) : Bool \elim x, y
  | true, true => true
  | true, false => true
  | false, true => true
  | false, false => false

{-Exercise 3: Define || via ‘if’.-}
\func \infix 7 || (a b : Bool) : Bool => if a a b

{-Exercise 4: Define the power and the factorial functions for natural numbers.-}
\func \infixl 6 + (x y : Nat) : Nat \elim y
  | zero => x
  | suc y => suc (x + y)

\func \infixl 7 * (x y : Nat) : Nat \elim y
  | zero => zero
  | suc y => x * y + x

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | zero => 1
  | suc y => x ^ y * x

\func fac (x : Nat) : Nat
  | zero => 1
  | suc x => fac x * suc x

\func \infixr 2 < (x y : Nat) : Bool \elim x, y
  | 0, 0 => false
  | suc n, 0 => false
  | 0, suc m => true
  | suc n, suc m => n < m

\func \infixr 5 stupid- (x y : Nat) : Nat \elim x, y
  | n, 0 =>  n
  | 0, _ => 0
  | suc n, suc m => n stupid- m

{-Exercise 5: Define mod and gcd.-}

\func mod-helper(s x y : Nat) : Nat \elim s
  | 0 => 0
  | suc s => if (x < y) x (mod-helper s (x stupid- y) y)

\func mod (x y : Nat) : Nat => mod-helper x x y


\func gcd-helper (s x y : Nat) : Nat \elim s
  | 0 => 0
  | suc s => if (x < y) (gcd-helper s x (y stupid- x)) (if (y < x) (gcd-helper s (x stupid- y) y) x)

\func gcd (x y : Nat): Nat => gcd-helper x x y

{-Exercise 6: Define the map function.-}
\data List (A : \Type) | nil | cons A (List A)

\func \infixl 6 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func map {A B : \Type} (f : A -> B) (list : List A) : List B \elim list
  | nil => nil{B}
  | cons a (list') => cons (f a) (map f list')

{-Exercise 7: Define the transpose function.
 It takes a list of lists considered as a matrix and
 returns a list of lists which represents the transposed matrix.-}

\func length {A : \Type} (xs : List A) : Nat
  | nil => zero
  | cons _ xs => suc (length xs)

\func choose_nth {A : \Type} (n : Nat) (xs : List A) : Maybe A \elim n, xs
  | _, nil => nothing
  | zero, cons x xs => just x
  | suc n, cons x xss => choose_nth n xss

\func choose_every_nth {A : \Type} (xs : List (List A)) (n : Nat) : List (Maybe A) => map (choose_nth n) xs

\func clearNothing {A : \Type} (xs : List (Maybe A)) : List A
  | nil => nil
  | cons nothing xs => clearNothing xs
  | cons (just a) xs => cons a (clearNothing xs)

\func clearDoubleNothing {A : \Type} (xs : List(List (Maybe A))) : List (List A) => map clearNothing xs

\func transpose {A : \Type} (xs : List (List A)) : List (List A) => reverse {List A} (clearDoubleNothing (helpTransp xs (length xs)))
  \where
    \func helpTransp {A : \Type} (xss : List(List A)) (large_n : Nat) : List (List (Maybe A)) \elim large_n
      | zero => nil
      | suc n => cons (choose_every_nth xss (suc n)) (helpTransp xss n)